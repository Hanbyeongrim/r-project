#--------------------------------------------------------------------
# 제3장 데이터 시각화
#--------------------------------------------------------------------

# 그림 3.5 -오른쪽 (p71)

install.packages("MASS");library(MASS)
data(Boston)
install.packages("lattice");library(lattice)
install.packages("ggplot2");library(ggplot2)

#type의 형태로 factor조건으로 히스토그램 출력
histogram(~medv | factor(chas), data=Boston, type="count", ylab="")
histogram(~medv | factor(chas), data=Boston, type="percent", ylab="")
#분포그래프
densityplot(~medv| factor(chas), data=Boston, plot.points=F)


boston=Boston[,c(4,9,14)]
rad=as.factor(Boston$rad)
install.packages("reshape2");library(reshape2)
melted=melt(boston, id.var=c("chas","rad"), measure.vars="medv" )

install.packages("plyr");library(plyr)
melted.means=ddply(melted, c("chas","rad"), summarize, mean=mean(value))
melted.means

barchart(mean~factor(rad)|chas,data=melted.means)
barchart(mean~factor(rad)|chas, layout=c(0,2), data=melted.means, ylab="avg(medv)",xlab="rad" )
barchart(mean~factor(rad)|chas, layout=c(1,2),data=melted.means, ylab="avg(medv)",xlab="rad")

# 그림 3.6
plot(Boston,cex=0.1)
plot(Boston[,c(1,3,13,14)], cex=1)


# 그림 3.11( parallel coordinates plot) 평행좌표계
cat.medv=as.numeric(Boston$medv>=30)

parallelplot(~Boston[c(1:13)]|factor(cat.medv), data=Boston)
#horizontal.axis 축바꾸기 layout=c(x,y)y는 조건 
parallelplot(~Boston[c(1:13)]|factor(cat.medv), horizontal.axis = FALSE,  layout=c(1,2), data=Boston)


#--------------------------------------------------------------------
# 제4장 차원축소
#--------------------------------------------------------------------

#Cereals Data
cereal=read.csv("Cereals.csv")

# missing data
colSums(is.na(cereal)) # Number of missing per column (variable)
rowSums(is.na(cereal)) # Number of missing per row

# The function complete.cases() returns a logical vector indicating which cases are complete. 
# list rows of data that have missing values
cereal[!complete.cases(cereal),]

# Creating a new dataset without missing data
cereals <- na.omit(cereal)
# 수치형 변수만으로 데이터 재구성(문자형은 제거)
xcereals=cereals[c(-1,-2,-3,-16)]
rating=cereals$rating

# Before Normalization
#princomp : 주성분 분석해주는 함수 cor=T가 디폴트
#prin 속 score : 주성분 점수, loadings : 주성분 계수
#summary해야 분산비 나옴
prin=princomp(xcereals,cor=FALSE)
summary(prin)
loadings(prin)
prin$scores
#screeplot : 주성분 분산에대한 그래프
# -> 주성분 몇개인지 결정. 평평해지는 부분 앞까지 또는 90%이상
screeplot(prin,type="lines")
#주성분 2개에 대한 그래프, 빨간색은 한쪽 주성분에만 영향을 주는 변수
biplot(prin)

install.packages("devtools");library(devtools)
install_github("vqv/ggbiplot")

library(ggbiplot)
g=ggbiplot(prin, obs.scale = 1, var.scale = 1, circle = TRUE)  # data=prin 사용
g=g + aes(colour=rating)   # aesthetic attribute로 rating사용하여 색상 설정
g=g + theme(legend.direction = 'horizontal', 
            legend.position = 'top')
print(g) 


# After normalization
prin2=princomp(xcereals,cor=TRUE)  
summary(prin2) 
loadings(prin2)
prin2$scores
screeplot(prin2,type="lines")
biplot(prin2)


g=ggbiplot(prin2, obs.scale = 1, var.scale = 1, circle = TRUE)  # data=prin2 사용
g=g + aes(colour=rating)  # aesthetic attribute로 rating사용
g=g + theme(legend.direction = 'horizontal', 
            legend.position = 'top')
print(g) 
prin2$loadings
